generator client {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String            @id @default(uuid())
  nickname               String            @unique @default("")
  email                  String            @unique @default("")
  registration_completed Boolean           @default(false)
  user_image             String            @default("")
  Threads                UserThreads[]
  UserPin                SecretPins[]
  LoggedUsers            LoggedUsers?
  workspaces             Workspaces[]
  workspaceAccess        WorkspaceAccess[]
  userRole               Roles             @relation(fields: [roleId], references: [id])
  roleId                 String
}

model Core {
  id            String @id @default(uuid())
  defaultThemes Json?  @default("{}")
  countryCodes  Json?  @default("[{}]")
}

model Workspaces {
  id            String            @id @unique @default(uuid())
  workspaceName String            @default("")
  identify      Json              @default("{}")
  kpi           Json              @default("[{}]")
  forms         Json              @default("[{}]")
  messages      Json              @default("[{}]")
  User          User              @relation(fields: [userId], references: [id])
  userId        String            @default("")
  members       WorkspaceAccess[]
}

model WorkspaceAccess {
  id          String     @id @default(uuid())
  user        User       @relation(fields: [userId], references: [id])
  userId      String
  workspace   Workspaces @relation(fields: [workspaceId], references: [id])
  workspaceId String
  role        String
  createdAt   DateTime   @default(now())
}

model LoggedUsers {
  id       String  @id @default(uuid())
  user     User    @relation(fields: [user_id], references: [id])
  user_id  String  @unique @default("")
  isLogged Boolean @default(false)
}

model Roles {
  id        String @id @default(uuid())
  roleName  String @unique
  roleValue Int    @unique
  User      User[]
}

model SecretPins {
  id      String @id @default(uuid())
  user    User   @relation(fields: [user_id], references: [id])
  user_id String @unique @default("")
  pin     Int    @default(0)
}

model UserThreads {
  thread_id   String   @unique
  message_id  String   @unique
  user        User     @relation(fields: [user_id], references: [id])
  user_id     String   @default("")
  thread_name String   @default("")
  isArchived  Boolean  @default(false)
  created_at  DateTime @default(now())
}
